{
    "0": [
        "Given an iter, how can you determine if an iter contains any item which satifies some condition? How can you determine if all items in the iter satifies said condition?",
        "\\n\\tPseudo: \\n\\t\\tANY[cond FOR iter]\\n\\t\\tALL[cond FOR iter]\\n\\tCode:\\n\\t\\tany(iter)\\n\\t\\tall(iter)"
    ],
    "1": [
        "What is the pseudocode for a listComp and dictComp?",
        "listComp: \\n\\t\\t[VAR/COND for VAR in iter] \\n\\t\\tdictComp: {k:v for k,v in iter.items()}"
    ],
    "2": [
        "Given D1 and D2 w type Dict[str,int], how do you determine the max amt that can be generated from D2 if D1 is mapping rubric?",
        "min( [D2[i]//D1[i] if i in D1 else 0 for i in D1] )\\n\\tIn essence you take the min[listComp]"
    ],
    "3": [
        "What do ds contain and how does ds behave diff in OOP vs FOP?",
        "ds contain: data which can be either qualitative or quantitative. In short notation it would be\\n\\tD(\u03a9,\u211d) : \u03a9 \u2227 \u211d \u2208 dt\\n\\t\u03a9 = qualitative, where \u03a9 -> str\\n\\t\u211d = quantitative, where \u211d -> Union[int,float]\\n\\t\u2234ds(dt)\\n\\tds can have func associated w them, bound together as part of a class \u2234 ds(dt,F) where F is a func space, F \u2208 {f: f \u220b ds}\\n\\tIn FOP a func can work w multi ds and is not bound to a specific ds.\\n\\tEx is a basic itr func which can itr a str or arr"
    ],
    "4": [
        "What is data?",
        "Data contains either or both qualitative info and or quantitative info\\n\\tD(\u03a9,\u211d)\\n\\t\u03a9 = qualitative, where \u03a9 -> str\\n\\t\u211d = quantitative, where \u211d -> Union[int,float]"
    ],
    "5": [
        "What is the describtive definition of ds? ",
        "A specialized format for generating, processing, retrieving, and storing data."
    ],
    "6": [
        "What is the set diff between two sets? Is this a commutative property?",
        "\\n\\tPseudo:\\n\\t\\tDIFF(s_1, s_2)\\n\\tCode:\\n\\t\\ts_1.difference(s_2)\\n\\tAnti-commutative property:\\n\\t\\tDIFF(s_1,s_2) != DIFF(s_2,s_1)\\n\\tEX:\\n\\t\\tDIFF({1,2,3,4,5,6},{1,2,3}) = {4,5,6}\\n\\t\\tDIFF({1,2,3},{1,2,3,4,5,6}) = set()"
    ],
    "7": [
        "What is the diff btw the two pseudo?\\n\\t[VAR/COND FOR iter]\\n\\t\\t-vs-\\n\\t[VAR FOR iter COND]",
        "[VAR/COND FOR iter] req COND to be ternary, where within the list IF[NOT COND] another value is used in place of the el\\n\\tEX:\\n\\t\\t[n if n % 2 else '_' for n in range(20)] \\n\\t\\t=> ['_', 1, '_', 3, '_', 5, '_', 7, '_', 9, '_', 11, '_', 13, '_', 15, '_', 17, '_', 19]\\n\tWhere as [VAR FOR iter COND] does not req ternary\\n\\tEX:\\n\\t\\t[n for n in range(20) if n % 2] \\n\\t\\t=> [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\\n\tNo COND for el in [VAR FOR iter COND]"
    ],
    "8": [
        "What is the pseudo for a listComp that does double iter?",
        "[VAR/cond FOR inner_iter in outter_iter FOR VAR in inner_iter]\\n\\t[EX]:\\n\\t\\ttxt = (('hello', 'world'), ('halo', 'ring'))\\n\\t\\tlistComp = [word for pair in txt for word in pair]\\n\\t\\tprint(listComp) #=> ['hello', 'world', 'halo', 'ring']"
    ],
    "9": [
        "In pseudo, some builtin fn returns a new ds\\n\\t\\tds.fn() => DS'\\n\\tHow would you write, in pseudo, the DS' to be stored in a VAR?",
        "VAR:dt = ds.fn()\\n\\tWhere dt is the datatype"
    ],
    "10": [
        "In general what is the best way to handle input options from user, when the user has multiple options to choose from? ",
        "Put all options (OPTIs) into a dict\\n\\nEX:\\n\\t\\td = { \\t0: \"no one likes this\",\\n\\t\\t\\t1: \"{} likes this\",\\n\\t\\t\\t2: \"{} and {} likes this\",\\n\\t\\t\\t3: \"{}, {}, and {} likes this\"\\n\\t\\t}"
    ],
    "11": [
        " Provide a mathematical description of ds. I.e. what are ds in a mathematical sense?",
        "ds \u2208 {dt: dt \u2286 {str, List, Dict, int, float, Tuple, None}}"
    ],
    "12": [
        "What is the purpose of ds?",
        "To store data for the purpose of being used w various algos. Data is info and is all abt storage of it to be used for processing"
    ],
    "13": [
        "What OPT can be performed to the following bool logic?\\n\\tIF cond_1 RETURN res\\n\\tELIF cond_2 RETURN res\\n\\tWhere both cluase return the same res?",
        "Combine the two caluse into a single clause\\n\\t\\tIF cond_1 OR cond_2 RETURN res"
    ],
    "14": [
        "What is the junction of two sets? what does junction of two sets mean?",
        "\\n\\tPseudo:\\n\\t\\ts1.JUNC(s2)\\n\\tCode:\\n\\t\\ts1.intersection(s2)\\n\\treturns a set of common values found in both sets"
    ],
    "15": [
        "What is O(n)_t for 'in' operator in py?",
        "\n\tfor List/Tuple O(n)\\n\\t\\tfor set/Dict O(1)"
    ],
    "16": [
        "What is the O(n)t for List.sort()?",
        "List.sort() will always take O(nlogn)"
    ],
    "17": [
        "How to replace a sub-str with a new str of a larger str?",
        " str.replace(txt, new_txt)\\n\\t\\t[EX]:\\n\\t\\t'Python for beginners'.replace('P', 'J')\\n\\t\\t\\t#=> 'Jython for beginners'\\n\\t\\t'Python for beginners'.replace('beginners', 'experts')\\n\\t\\t\\t#=> 'Python for experts'"
    ],
    "18": [
        "What method is used to find the idx of a sub_str within a str?",
        "    str.find(sub_str)\\n\\t[EX]:\\n\\t\\t'python'.find('p') \\t#=> 0\\n\\t\\t'python'.find('thon') \\t#=> 2\\n\\t\\t'python'.find('P') \\t#=> -1\\n\\t\\t'python'.find('z') \\t#=> -1\\n\\tstr.index(sub_str) also can be used. If sub_str not found returns ValueError"
    ],
    "19": [
        "How to check if multiple keys exist in a dict? I.e. does key_1, ..., key_n exist in dict?",
        "UnOpt method:\\n\\t\\t\\tIF ('key_1', ...,'key_n') IN dict.keys()\\n\\t\\tOpt method:\\n\\t\\t\\treq_keys:Set = ('key_1', ...,'key_n')\\n\\t\\t\\tIF all(key IN dict FOR key in req_keys)"
    ],
    "20": [
        "What is the scope of a WHILE loop, i.e. what VAR access does the business logic have within a WHILE loop?",
        "static VAR are accessable to the business logic inside the WHILE block. However dynamic VARs should be defined outside the loop to allow mutation of VAR. Once a WHILE loop has been init the op will always begin at the beginning of a WHILE loop and dynamic VAR are mutatble outside the loop."
    ],
    "21": [
        "What is the diff between the two codes?\\n\\ti = 0\\t\\t\\ti = 0\\n\\tm = 'hello'\\t\\twhile i < 10:\\n\\twhile i < 10:\\t\\t   m = 'hello'\\n\\t   print(i, m)\\t\\t   if i == 5:\\n\\t   if i == 5:\\t\\t\\tm = 'hi'\\n\\t\\tm = 'hi'\\t\\tprint(i, m)\\n\\t   i +=1\\t\\t   i += 1",
        "In the 1st code once i == 5; mutation occurs and change is kept for i > 5, m = 'hi'. In the 2nd code mutation happens only for i == 5; it isn't kept, i > 5 m = 'hello'"
    ],
    "22": [
        "What is the diff btw floating point division and int division?",
        "Floating point division yeilds a float num while int division, which uses the '//' op, yeilds to a int num\\n\\t[EX]:\\n\\t\\t5 / 2 #=> 2.5\\n\\t\\t5 // 2 #=> 2"
    ],
    "23": [
        "When err handling what is the diff btw an expected err vs an unexpected err? Provide ans w pseudo. ",
        "Unexpected err does not have cond for failure\\ntry \\t\\t\\t\\ttry \\n   IF cond RAISE TypeErr(msg)\\t...unexpected err in code...\\n except TypeErr as err \\t except TypeErr as err \\n   RETURN repr(err)\\t\\t   RAISE TypeErr(msg)\\n\\t\\t\\t\\t\\n[EX]:\\ntry: \\t\\t\\t\\ttry: \\n   if len(str) == 0:\\t\\t\\t   num_1 / num_2\\n      raise ValueError('str is empty')\\nexcept ValueError as err: \\t\\t except ZeroDivisionError: \\n   return repr(err)\\t\\t\\t   raise ZeroDivisionError('num_2 cannot be 0')\\n\\t\\t\\t\\t\\nUnexpected err does not have cond for failure"
    ],
    "24": [
        "What method can you use to determine the lesser btw two ints?",
        "min(num1, num2)"
    ],
    "25": [
        "What method can you use to determine the greater val btw two ints?",
        "max(num1, num2)"
    ],
    "26": [
        "Classes take in init data when inst e.g. `VAR ex = SomeEx(data)`. \\n\tHow do you store the data internally in a class? ",
        "All data are stored within the `def __init__(self, data)`. To have the \\n data be made globally accessable to all other class methods you store the \\n data within `__init__` as `self._data = data`, where the `_` after `self`\\n signifies \"internal/private\" usage to the class. "
    ],
    "27": [
        "What does the following return, `sorted(\"918\")`?",
        "List[str]: `[\"1\", \"8\", \"9\"]`"
    ],
    "28": [
        "What is the output of the following len(44)?",
        "TypeError: Object of type 'int' has no len()\\n`len(str)` can only be performed on str or list type"
    ],
    "29": [
        "Is the following possible in py, list(num), where num = 1234? (Can you convert an int in2 a list[int]?)",
        "No, list(num) is possible if num = '1234'. However if num:int then \\n\tlistComp:[int(n) for n in str(num)]"
    ],
    "30": [
        "What is the diff(str.index(sub_str), str.find(sub_str))?",
        "str.find(sub_str) return -1 if sub_str not found. \\n\\tstr.index(sub_str) returns ValueError if sub_str not found"
    ],
    "31": [
        "How do you quickly convert a str into a list of chars? ",
        "By using the spread op `*`, [*str]\\n\\tEx:\\n\\t\\ts = 'jeff'\\n\\t\\t[*s] #=> ['j', 'e', 'f', 'f']"
    ],
    "32": [
        "What is the diff(sorted(), .sort())",
        "The sorted() method does not mutate it's input val where as .sort() is a M.P.O"
    ],
    "33": [
        "How do you take a list[int], where each int is a digit, and convert it to a single num? ",
        "\n\tVAR joined_str = ''.join(map(str, list[int]))\n\tVAR res_int = int(joined_str)"
    ],
    "34": [
        "What is the pseudo code and an actual example of iterating in reverse an iter?",
        "rev_itr(iter, el)\n\t\tEX:\n\t\tnums = [1, 2, 3, 4, 5]\n\t\tfor n in reversed(nums):\n\t\t\tprint(n)\n\t\t#=> 5, 4, 3, 2, 1"
    ],
    "35": [
        "Given a str with an unknown amount of white spaces\n\t\tEx: `hello world`\n\t\tEx: `   fly me   to   the moon  `\n\tHow do you remove all spaces and return a list of words?",
        "str.split()"
    ],
    "36": [
        "What is the diff_btw `ds.method()` and `method(ds)`?",
        "The former is directly operating on the ds which can lead 2 mutation of the original ds, where as in the latter the method acts on the ds producing a res rather than direct manipualtion"
    ],
    "37": [
        "Do linked-list exist in py?",
        "No they do not, ergo if you wish to work with linked list you must first convert an arr/list in2 a linked-list"
    ],
    "38": [
        "For BTs (binary trees) what does 'inorder traversal' mean?",
        "Search done by visiting the left subtree, current node, and right subtree"
    ],
    "39": [
        "Suppose you need 2 create an arr of a given N size. What is the naive way of doing this and the expert way of doing this?",
        "\n\tNaive - list comprehension:\n\t\t[n for n in range(N)]\n\tExpert - list method\n\t\tlist(range(N))"
    ],
    "40": [
        "Both .index(el) and .find(el) work on str dt. Does it also work on list dt? ",
        "No\n\t.index(el) works on list but .find(el) does not work on list dt"
    ],
    "41": [
        "Given arr = [1, 2, 3] how do you reverse this arr?",
        "using the method `reversed(arr)` which returns a reversed iter\n\tThus it is best 2 store the rev_iter as \n\trev_arr = reversed(arr)"
    ],
    "42": [
        "Explain what the zip() method does?",
        "Combines two or more iter 2 create a tuple iter where each el of the tuple contains the ith el from each of the input iter.\n\tEx:\n\t\ttuple1 = ('a', 'b', 'c')\n\t\tlist2 = [1, 2, 3]\n\t\tres = zip(tuple1, list2)\n\t\tres_list = list(res)\n\t\tprint(res_list) #=> [('a', 1), ('b', 2), ('c', 3)]"
    ],
    "43": [
        "How do you unzip a ziped iter, where the iter is `zipped:list[tuple[str, int]] = [('a', 1), ('b', 2), ('c', 3)]`?",
        "\n\tunzipped = list(zip(*zipped))\n\tprint(unzipped) #=> [('a', 'b', 'c'), (1, 2, 3)]"
    ],
    "44": [
        "In problems it is useful 2 keep track of certain data, a VAR `seen` dt set is often used. What is the benefit of storing data in `seen`?",
        "\n\t`seen` is useful when dealing w iterative processes. Used 2 keep track\n\tof els that have been encountered during the exec of an algo. Here r a few reasons why VAR `seen`\n\tis useful:\n\t\t1. Detecting Cycles: \n\t\t\tIf a repetition is detected, it can be an indication of a cycle, helpful 2 prevent inf loops\n\t\tAvoid duplicates:\n\t\t\tA need 4 unique el, `seen` helps reducing redudntant computations\n\t\tEfficient membership testing:\n\t\t\tSets in py offer contant-time avg look up O(1) making it performance efficient in both time and space complexities."
    ],
    "45": [
        "Explain what is happening in the following code: \n\tsum(1 for num in arr if num > 0)\n\tWhat does the code produce?",
        "The expression inside `sum` is a generator expression that produces val `1` for each el in the arr\n\tthat meets the cond. Essentially an arr of 1s and returns the sum of 1s"
    ],
    "46": [
        "You are iter thr a List[int], how do you swap two num that meet a cond such that the original arr is mutated in place? Only give the piece of code that performs the swap",
        "arr[i], arr[i + 1] = arr[i + 1], arr[i]"
    ],
    "47": [
        "Given a List[int], u r tasked w moving all nonzero el to the left that mutates in place the input arr. How do you acheive this?",
        "\n\ti = 0\n\tfor num in arr:\n\t\tif num != 0:\n\t\t\tarr[i] = num\n\t\t\ti +=1\n\n\tarr[i:] = [0] * (len(arr) - i)"
    ],
    "48": [
        "Given a num as a str dt, how do you split da num into its digits? Ex: '12' -> ['1', '2']",
        "list(num)"
    ],
    "49": [
        "In py there exist da bitwise XOR op. Explain what is happening under da hood by provide a boolean table using da interaction btw(1, 0) and its res. ",
        "XOR Truth Table\n\t0 ^ 0 = 0\n\t0 ^ 1 = 1\n\t1 ^ 0 = 1\n\t1 ^ 1 = 0"
    ], 
    "50": [
        "When is the XOR op used in py?", 
        "XOR is commonly used 2 find da unique el in an arr"
    ]
}